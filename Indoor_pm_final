#include <HardwareSerial.h>

HardwareSerial sensorSerial(1);  // Create a new Serial instance for the sensor

int pm2 = 0;
int pm10 = 0;

byte command_frame[9] = {0xAA, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x67, 0xBB};
byte received_data[9];
int sum = 0;

unsigned long warmUpTime = 120000;  // 2 minutes in milliseconds
unsigned long startTime;

// Replace these with the actual RX and TX pin numbers for your ESP32
#define RX_PIN 16
#define TX_PIN 17

void send_command(byte command) {
  command_frame[1] = command;
  sum = command_frame[0] + command_frame[1] + command_frame[2] + command_frame[3] + command_frame[4] + command_frame[5] + command_frame[8];
  int rem = sum % 256;
  command_frame[6] = (sum - rem) / 256;
  command_frame[7] = rem;
  delay(1000);  // Allow the sensor time to process the command
  sensorSerial.write(command_frame, 9);  // Send command to the sensor
}

bool checksum() {
  sum = received_data[0] + received_data[1] + received_data[2] + received_data[3] + received_data[4] + received_data[5] + received_data[8];
  return sum == (received_data[6] * 256 + received_data[7]);
}

void calculate_pm() {
  pm2 = received_data[4] * 256 + received_data[5];
  pm10 = received_data[2] * 256 + received_data[3];
  Serial.print("PM2.5: ");
  Serial.println(pm2);
  Serial.print("PM10: ");
  Serial.println(pm10);
  Serial.println("----------PM updated successfully!-------------");
}

void PM_setup() {
  send_command(0x01);  // Wake up the sensor
}

void PM_Reading() {
  send_command(0x02);  // Request data
  delay(500);  // Give some time for the data to arrive

  if (sensorSerial.available() >= 9) {  // Check if we have at least 9 bytes available
    sensorSerial.readBytes(received_data, 9);  // Read the data from the sensor
    if (checksum()) {
      calculate_pm();  // Process the data if checksum is valid
    } else {
      Serial.println("Checksum failed!");
    }
  } else {
    Serial.println("No data available!");  // No data available on the serial line
  }
}

void setup() {
  Serial.begin(9600);  // Serial port for debugging
  sensorSerial.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);  // Initialize the sensor serial port
  PM_setup();  // Wake up the sensor
  delay(1000);  // Give time to wake up the sensor
  startTime = millis();  // Record the start time for the warm-up period
}

void loop() {
  if (millis() - startTime > warmUpTime) {  // Check if the warm-up period is over
    PM_Reading();  // Start reading sensor data
  } else {
    Serial.println("Warming up...");  // Display a message during the warm-up period
  }
  delay(5000);  // Wait 5 seconds before the next reading
}
